
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20151001
//----------------------------------------------------

package Parse;

import Absyn.*;
import util.List;
import ErrorMsg.Loc;
import ErrorMsg.ErrorMsg;
import Symbol.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20151001 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PandaCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return PandaSym.class;
}

  /** Default constructor. */
  @Deprecated
  public PandaCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PandaCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PandaCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\006\000\002\004\010" +
    "\000\002\004\006\000\002\004\013\000\002\004\011\000" +
    "\002\012\003\000\002\012\005\000\002\012\005\000\002" +
    "\014\002\000\002\014\004\000\002\015\002\000\002\015" +
    "\005\000\002\013\005\000\002\017\002\000\002\017\004" +
    "\000\002\020\002\000\002\020\005\000\002\016\005\000" +
    "\002\021\003\000\002\021\006\000\002\021\005\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\007" +
    "\000\002\005\007\000\002\005\003\000\002\005\004\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\006\000\002" +
    "\005\010\000\002\005\006\000\002\005\006\000\002\005" +
    "\003\000\002\005\006\000\002\005\005\000\002\006\002" +
    "\000\002\006\004\000\002\007\002\000\002\007\005\000" +
    "\002\010\002\000\002\010\004\000\002\011\002\000\002" +
    "\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\010\026\010\027\004\030\007\001\002\000" +
    "\004\011\204\001\002\000\004\002\203\001\002\000\004" +
    "\002\000\001\002\000\004\011\035\001\002\000\004\011" +
    "\013\001\002\000\014\002\uffff\026\010\027\004\030\007" +
    "\040\uffff\001\002\000\006\002\ufffe\040\ufffe\001\002\000" +
    "\004\050\014\001\002\000\010\011\015\015\016\017\020" +
    "\001\002\000\014\002\ufff8\026\ufff8\027\ufff8\030\ufff8\040" +
    "\ufff8\001\002\000\006\011\023\016\ufff5\001\002\000\014" +
    "\002\ufffd\026\ufffd\027\ufffd\030\ufffd\040\ufffd\001\002\000" +
    "\004\011\021\001\002\000\004\020\022\001\002\000\014" +
    "\002\ufff7\026\ufff7\027\ufff7\030\ufff7\040\ufff7\001\002\000" +
    "\004\023\033\001\002\000\004\016\032\001\002\000\010" +
    "\014\ufff3\016\ufff3\021\026\001\002\000\004\011\023\001" +
    "\002\000\006\014\ufff4\016\ufff4\001\002\000\010\014\ufff3" +
    "\016\ufff3\021\026\001\002\000\006\014\ufff2\016\ufff2\001" +
    "\002\000\014\002\ufff6\026\ufff6\027\ufff6\030\ufff6\040\ufff6" +
    "\001\002\000\004\011\034\001\002\000\010\014\ufff1\016" +
    "\ufff1\021\ufff1\001\002\000\004\013\036\001\002\000\006" +
    "\011\023\014\ufff5\001\002\000\004\014\040\001\002\000" +
    "\006\023\042\050\041\001\002\000\036\004\047\005\063" +
    "\006\053\007\051\010\057\011\055\012\050\013\061\025" +
    "\056\031\054\034\046\036\064\037\060\043\045\001\002" +
    "\000\004\011\043\001\002\000\004\050\044\001\002\000" +
    "\036\004\047\005\063\006\053\007\051\010\057\011\055" +
    "\012\050\013\061\025\056\031\054\034\046\036\064\037" +
    "\060\043\045\001\002\000\036\004\047\005\063\006\053" +
    "\007\051\010\057\011\055\012\050\013\061\025\056\031" +
    "\054\034\046\036\064\037\060\043\045\001\002\000\036" +
    "\004\047\005\063\006\053\007\051\010\057\011\055\012" +
    "\050\013\061\025\056\031\054\034\046\036\064\037\060" +
    "\043\045\001\002\000\070\002\uffe7\014\uffe7\016\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\026\uffe7\027\uffe7\030\uffe7\032\uffe7" +
    "\033\uffe7\035\uffe7\040\uffe7\042\uffe7\043\uffe7\044\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\057\uffe7\001\002\000\070\002" +
    "\uffe8\014\uffe8\016\uffe8\020\uffe8\021\uffe8\022\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\032\uffe8\033\uffe8\035\uffe8\040\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057" +
    "\uffe8\001\002\000\070\002\uffe4\014\uffe4\016\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\026\uffe4\027\uffe4\030\uffe4\032\uffe4\033" +
    "\uffe4\035\uffe4\040\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4" +
    "\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\057\uffe4\001\002\000\050\002\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\040\ufffa\042\076\043\071\044" +
    "\103\045\101\046\075\047\073\050\077\051\104\052\105" +
    "\053\100\054\102\055\074\056\072\057\106\001\002\000" +
    "\070\002\uffe5\014\uffe5\016\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\032\uffe5\033\uffe5\035\uffe5\040" +
    "\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\057\uffe5\001\002\000\036\004\047\005\063\006\053" +
    "\007\051\010\057\011\055\012\050\013\061\025\056\031" +
    "\054\034\046\036\064\037\060\043\045\001\002\000\100" +
    "\002\uffeb\013\166\014\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\024\uffeb\026\uffeb\027\uffeb\030\uffeb\032\uffeb" +
    "\033\uffeb\035\uffeb\040\uffeb\042\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb" +
    "\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\001\002\000" +
    "\004\011\142\001\002\000\070\002\uffe3\014\uffe3\016\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\026\uffe3\027\uffe3\030\uffe3\032" +
    "\uffe3\033\uffe3\035\uffe3\040\uffe3\042\uffe3\043\uffe3\044\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053" +
    "\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\001\002\000\010" +
    "\026\010\027\004\030\007\001\002\000\040\004\047\005" +
    "\063\006\053\007\051\010\057\011\055\012\050\013\061" +
    "\014\uffc4\025\056\031\054\034\046\036\064\037\060\043" +
    "\045\001\002\000\076\002\uffe0\014\uffe0\016\uffe0\017\065" +
    "\020\uffe0\021\uffe0\022\uffe0\024\066\026\uffe0\027\uffe0\030" +
    "\uffe0\032\uffe0\033\uffe0\035\uffe0\040\uffe0\042\uffe0\043\uffe0" +
    "\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052" +
    "\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\067" +
    "\001\002\000\070\002\uffe6\014\uffe6\016\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\026\uffe6\027\uffe6\030\uffe6\032\uffe6\033\uffe6" +
    "\035\uffe6\040\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046" +
    "\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\057\uffe6\001\002\000\070\002\uffcb\014" +
    "\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\032\uffcb\033\uffcb\035\uffcb\040\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\001" +
    "\002\000\036\004\047\005\063\006\053\007\051\010\057" +
    "\011\055\012\050\013\061\025\056\031\054\034\046\036" +
    "\064\037\060\043\045\001\002\000\004\011\125\001\002" +
    "\000\036\004\047\005\063\006\053\007\051\010\057\011" +
    "\055\012\050\013\061\025\056\031\054\034\046\036\064" +
    "\037\060\043\045\001\002\000\070\002\uffd0\014\uffd0\016" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\032\uffd0\033\uffd0\035\uffd0\040\uffd0\042\076\043\071\044" +
    "\103\045\101\046\075\047\073\050\077\051\104\052\105" +
    "\053\100\054\102\055\074\056\072\057\106\001\002\000" +
    "\036\004\047\005\063\006\053\007\051\010\057\011\055" +
    "\012\050\013\061\025\056\031\054\034\046\036\064\037" +
    "\060\043\045\001\002\000\036\004\047\005\063\006\053" +
    "\007\051\010\057\011\055\012\050\013\061\025\056\031" +
    "\054\034\046\036\064\037\060\043\045\001\002\000\036" +
    "\004\047\005\063\006\053\007\051\010\057\011\055\012" +
    "\050\013\061\025\056\031\054\034\046\036\064\037\060" +
    "\043\045\001\002\000\036\004\047\005\063\006\053\007" +
    "\051\010\057\011\055\012\050\013\061\025\056\031\054" +
    "\034\046\036\064\037\060\043\045\001\002\000\036\004" +
    "\047\005\063\006\053\007\051\010\057\011\055\012\050" +
    "\013\061\025\056\031\054\034\046\036\064\037\060\043" +
    "\045\001\002\000\036\004\047\005\063\006\053\007\051" +
    "\010\057\011\055\012\050\013\061\025\056\031\054\034" +
    "\046\036\064\037\060\043\045\001\002\000\036\004\047" +
    "\005\063\006\053\007\051\010\057\011\055\012\050\013" +
    "\061\025\056\031\054\034\046\036\064\037\060\043\045" +
    "\001\002\000\036\004\047\005\063\006\053\007\051\010" +
    "\057\011\055\012\050\013\061\025\056\031\054\034\046" +
    "\036\064\037\060\043\045\001\002\000\036\004\047\005" +
    "\063\006\053\007\051\010\057\011\055\012\050\013\061" +
    "\025\056\031\054\034\046\036\064\037\060\043\045\001" +
    "\002\000\036\004\047\005\063\006\053\007\051\010\057" +
    "\011\055\012\050\013\061\025\056\031\054\034\046\036" +
    "\064\037\060\043\045\001\002\000\036\004\047\005\063" +
    "\006\053\007\051\010\057\011\055\012\050\013\061\025" +
    "\056\031\054\034\046\036\064\037\060\043\045\001\002" +
    "\000\036\004\047\005\063\006\053\007\051\010\057\011" +
    "\055\012\050\013\061\025\056\031\054\034\046\036\064" +
    "\037\060\043\045\001\002\000\036\004\047\005\063\006" +
    "\053\007\051\010\057\011\055\012\050\013\061\025\056" +
    "\031\054\034\046\036\064\037\060\043\045\001\002\000" +
    "\036\004\047\005\063\006\053\007\051\010\057\011\055" +
    "\012\050\013\061\025\056\031\054\034\046\036\064\037" +
    "\060\043\045\001\002\000\070\002\uffd1\014\uffd1\016\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\026\uffd1\027\uffd1\030\uffd1\032" +
    "\uffd1\033\uffd1\035\uffd1\040\uffd1\042\076\043\071\044\103" +
    "\045\101\046\075\047\073\050\077\051\104\052\105\053" +
    "\100\054\102\055\074\056\072\057\uffd1\001\002\000\054" +
    "\002\uffd6\014\uffd6\016\uffd6\020\uffd6\021\uffd6\022\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\032\uffd6\033\uffd6\035\uffd6\040\uffd6" +
    "\042\076\043\071\044\103\045\101\046\075\047\073\056" +
    "\uffd6\057\uffd6\001\002\000\054\002\uffd7\014\uffd7\016\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\026\uffd7\027\uffd7\030\uffd7\032" +
    "\uffd7\033\uffd7\035\uffd7\040\uffd7\042\076\043\071\044\103" +
    "\045\101\046\075\047\073\056\uffd7\057\uffd7\001\002\000" +
    "\070\002\uffdc\014\uffdc\016\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\026\uffdc\027\uffdc\030\uffdc\032\uffdc\033\uffdc\035\uffdc\040" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\073" +
    "\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056" +
    "\uffdc\057\uffdc\001\002\000\054\002\uffd4\014\uffd4\016\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\026\uffd4\027\uffd4\030\uffd4\032" +
    "\uffd4\033\uffd4\035\uffd4\040\uffd4\042\076\043\071\044\103" +
    "\045\101\046\075\047\073\056\uffd4\057\uffd4\001\002\000" +
    "\070\002\uffdb\014\uffdb\016\uffdb\020\uffdb\021\uffdb\022\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\032\uffdb\033\uffdb\035\uffdb\040" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\073" +
    "\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056" +
    "\uffdb\057\uffdb\001\002\000\054\002\uffd5\014\uffd5\016\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\026\uffd5\027\uffd5\030\uffd5\032" +
    "\uffd5\033\uffd5\035\uffd5\040\uffd5\042\076\043\071\044\103" +
    "\045\101\046\075\047\073\056\uffd5\057\uffd5\001\002\000" +
    "\054\002\uffd8\014\uffd8\016\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\032\uffd8\033\uffd8\035\uffd8\040" +
    "\uffd8\042\076\043\071\044\103\045\101\046\075\047\073" +
    "\056\uffd8\057\uffd8\001\002\000\070\002\uffde\014\uffde\016" +
    "\uffde\020\uffde\021\uffde\022\uffde\026\uffde\027\uffde\030\uffde" +
    "\032\uffde\033\uffde\035\uffde\040\uffde\042\uffde\043\uffde\044" +
    "\103\045\101\046\075\047\073\050\uffde\051\uffde\052\uffde" +
    "\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\001\002\000" +
    "\070\002\uffda\014\uffda\016\uffda\020\uffda\021\uffda\022\uffda" +
    "\026\uffda\027\uffda\030\uffda\032\uffda\033\uffda\035\uffda\040" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\073" +
    "\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056" +
    "\uffda\057\uffda\001\002\000\054\002\uffd3\014\uffd3\016\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\026\uffd3\027\uffd3\030\uffd3\032" +
    "\uffd3\033\uffd3\035\uffd3\040\uffd3\042\076\043\071\044\103" +
    "\045\101\046\075\047\073\056\uffd3\057\uffd3\001\002\000" +
    "\070\002\uffd9\014\uffd9\016\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\032\uffd9\033\uffd9\035\uffd9\040" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\073" +
    "\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056" +
    "\uffd9\057\uffd9\001\002\000\070\002\uffd2\014\uffd2\016\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\026\uffd2\027\uffd2\030\uffd2\032" +
    "\uffd2\033\uffd2\035\uffd2\040\uffd2\042\076\043\071\044\103" +
    "\045\101\046\075\047\073\050\077\051\104\052\105\053" +
    "\100\054\102\055\074\056\uffd2\057\uffd2\001\002\000\070" +
    "\002\uffdd\014\uffdd\016\uffdd\020\uffdd\021\uffdd\022\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\032\uffdd\033\uffdd\035\uffdd\040\uffdd" +
    "\042\uffdd\043\uffdd\044\103\045\101\046\075\047\073\050" +
    "\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd" +
    "\057\uffdd\001\002\000\076\002\uffe9\014\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\024\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\032\uffe9\033\uffe9\035\uffe9\040\uffe9\042\uffe9\043" +
    "\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060" +
    "\uffe9\001\002\000\040\020\127\042\076\043\071\044\103" +
    "\045\101\046\075\047\073\050\077\051\104\052\105\053" +
    "\100\054\102\055\074\056\072\057\106\001\002\000\076" +
    "\002\uffea\014\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\024\uffea\026\uffea\027\uffea\030\uffea\032\uffea\033\uffea" +
    "\035\uffea\040\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046" +
    "\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\055\uffea\056\uffea\057\uffea\060\uffea\001\002\000\004\014" +
    "\136\001\002\000\042\014\uffc2\022\132\042\076\043\071" +
    "\044\103\045\101\046\075\047\073\050\077\051\104\052" +
    "\105\053\100\054\102\055\074\056\072\057\106\001\002" +
    "\000\036\004\047\005\063\006\053\007\051\010\057\011" +
    "\055\012\050\013\061\025\056\031\054\034\046\036\064" +
    "\037\060\043\045\001\002\000\004\014\uffc3\001\002\000" +
    "\042\014\uffc2\022\132\042\076\043\071\044\103\045\101" +
    "\046\075\047\073\050\077\051\104\052\105\053\100\054" +
    "\102\055\074\056\072\057\106\001\002\000\004\014\uffc1" +
    "\001\002\000\070\002\uffc9\014\uffc9\016\uffc9\020\uffc9\021" +
    "\uffc9\022\uffc9\026\uffc9\027\uffc9\030\uffc9\032\uffc9\033\uffc9" +
    "\035\uffc9\040\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\001\002\000\004\040\140\001" +
    "\002\000\036\004\047\005\063\006\053\007\051\010\057" +
    "\011\055\012\050\013\061\025\056\031\054\034\046\036" +
    "\064\037\060\043\045\001\002\000\070\002\uffca\014\uffca" +
    "\016\uffca\020\uffca\021\uffca\022\uffca\026\uffca\027\uffca\030" +
    "\uffca\032\uffca\033\uffca\035\uffca\040\uffca\042\076\043\071" +
    "\044\103\045\101\046\075\047\073\050\077\051\104\052" +
    "\105\053\100\054\102\055\074\056\072\057\106\001\002" +
    "\000\006\015\143\017\144\001\002\000\006\011\155\016" +
    "\ufff0\001\002\000\040\004\047\005\063\006\053\007\051" +
    "\010\057\011\055\012\050\013\061\020\uffc8\025\056\031" +
    "\054\034\046\036\064\037\060\043\045\001\002\000\044" +
    "\014\uffc6\020\uffc6\021\151\042\076\043\071\044\103\045" +
    "\101\046\075\047\073\050\077\051\104\052\105\053\100" +
    "\054\102\055\074\056\072\057\106\001\002\000\004\020" +
    "\147\001\002\000\070\002\uffe1\014\uffe1\016\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\026\uffe1\027\uffe1\030\uffe1\032\uffe1\033" +
    "\uffe1\035\uffe1\040\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054" +
    "\uffe1\055\uffe1\056\uffe1\057\uffe1\001\002\000\006\014\uffc7" +
    "\020\uffc7\001\002\000\036\004\047\005\063\006\053\007" +
    "\051\010\057\011\055\012\050\013\061\025\056\031\054" +
    "\034\046\036\064\037\060\043\045\001\002\000\044\014" +
    "\uffc6\020\uffc6\021\151\042\076\043\071\044\103\045\101" +
    "\046\075\047\073\050\077\051\104\052\105\053\100\054" +
    "\102\055\074\056\072\057\106\001\002\000\006\014\uffc5" +
    "\020\uffc5\001\002\000\004\016\165\001\002\000\004\050" +
    "\163\001\002\000\006\016\uffee\021\157\001\002\000\004" +
    "\011\155\001\002\000\004\016\uffef\001\002\000\006\016" +
    "\uffee\021\157\001\002\000\004\016\uffed\001\002\000\036" +
    "\004\047\005\063\006\053\007\051\010\057\011\055\012" +
    "\050\013\061\025\056\031\054\034\046\036\064\037\060" +
    "\043\045\001\002\000\042\016\uffec\021\uffec\042\076\043" +
    "\071\044\103\045\101\046\075\047\073\050\077\051\104" +
    "\052\105\053\100\054\102\055\074\056\072\057\106\001" +
    "\002\000\070\002\uffe2\014\uffe2\016\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\026\uffe2\027\uffe2\030\uffe2\032\uffe2\033\uffe2\035" +
    "\uffe2\040\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\057\uffe2\001\002\000\040\004\047\005\063" +
    "\006\053\007\051\010\057\011\055\012\050\013\061\014" +
    "\uffc8\025\056\031\054\034\046\036\064\037\060\043\045" +
    "\001\002\000\004\014\170\001\002\000\070\002\uffcf\014" +
    "\uffcf\016\uffcf\020\uffcf\021\uffcf\022\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\032\uffcf\033\uffcf\035\uffcf\040\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\001" +
    "\002\000\040\032\172\042\076\043\071\044\103\045\101" +
    "\046\075\047\073\050\077\051\104\052\105\053\100\054" +
    "\102\055\074\056\072\057\106\001\002\000\036\004\047" +
    "\005\063\006\053\007\051\010\057\011\055\012\050\013" +
    "\061\025\056\031\054\034\046\036\064\037\060\043\045" +
    "\001\002\000\070\002\uffcd\014\uffcd\016\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\026\uffcd\027\uffcd\030\uffcd\032\uffcd\033\174" +
    "\035\uffcd\040\uffcd\042\076\043\071\044\103\045\101\046" +
    "\075\047\073\050\077\051\104\052\105\053\100\054\102" +
    "\055\074\056\072\057\106\001\002\000\036\004\047\005" +
    "\063\006\053\007\051\010\057\011\055\012\050\013\061" +
    "\025\056\031\054\034\046\036\064\037\060\043\045\001" +
    "\002\000\070\002\uffce\014\uffce\016\uffce\020\uffce\021\uffce" +
    "\022\uffce\026\uffce\027\uffce\030\uffce\032\uffce\033\uffce\035" +
    "\uffce\040\uffce\042\076\043\071\044\103\045\101\046\075" +
    "\047\073\050\077\051\104\052\105\053\100\054\102\055" +
    "\074\056\072\057\106\001\002\000\040\035\177\042\076" +
    "\043\071\044\103\045\101\046\075\047\073\050\077\051" +
    "\104\052\105\053\100\054\102\055\074\056\072\057\106" +
    "\001\002\000\036\004\047\005\063\006\053\007\051\010" +
    "\057\011\055\012\050\013\061\025\056\031\054\034\046" +
    "\036\064\037\060\043\045\001\002\000\070\002\uffcc\014" +
    "\uffcc\016\uffcc\020\uffcc\021\uffcc\022\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\032\uffcc\033\uffcc\035\uffcc\040\uffcc\042\076\043" +
    "\071\044\103\045\101\046\075\047\073\050\077\051\104" +
    "\052\105\053\100\054\102\055\074\056\072\057\106\001" +
    "\002\000\070\002\uffdf\014\uffdf\016\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\026\uffdf\027\uffdf\030\uffdf\032\uffdf\033\uffdf\035" +
    "\uffdf\040\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055" +
    "\uffdf\056\uffdf\057\uffdf\001\002\000\050\002\ufff9\026\ufff9" +
    "\027\ufff9\030\ufff9\040\ufff9\042\076\043\071\044\103\045" +
    "\101\046\075\047\073\050\077\051\104\052\105\053\100" +
    "\054\102\055\074\056\072\057\106\001\002\000\004\002" +
    "\001\001\002\000\006\023\205\060\206\001\002\000\004" +
    "\011\210\001\002\000\036\004\047\005\063\006\053\007" +
    "\051\010\057\011\055\012\050\013\061\025\056\031\054" +
    "\034\046\036\064\037\060\043\045\001\002\000\050\002" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\040\ufffb\042\076\043\071" +
    "\044\103\045\101\046\075\047\073\050\077\051\104\052" +
    "\105\053\100\054\102\055\074\056\072\057\106\001\002" +
    "\000\004\050\211\001\002\000\036\004\047\005\063\006" +
    "\053\007\051\010\057\011\055\012\050\013\061\025\056" +
    "\031\054\034\046\036\064\037\060\043\045\001\002\000" +
    "\050\002\ufffc\026\ufffc\027\ufffc\030\ufffc\040\ufffc\042\076" +
    "\043\071\044\103\045\101\046\075\047\073\050\077\051" +
    "\104\052\105\053\100\054\102\055\074\056\072\057\106" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\010\002\004\003\005\004\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\011\004\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\016" +
    "\001\001\000\002\001\001\000\006\013\024\014\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\026\001\001\000\004\013\027\001\001\000\002" +
    "\001\001\000\004\015\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\024\014\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\201\021\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\051\021" +
    "\061\001\001\000\006\005\200\021\061\001\001\000\006" +
    "\005\175\021\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\170\021\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\136\004\010" +
    "\001\001\000\010\005\130\010\127\021\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\125\021\061\001\001\000\002\001\001\000\006\005" +
    "\067\021\061\001\001\000\002\001\001\000\006\005\123" +
    "\021\061\001\001\000\006\005\122\021\061\001\001\000" +
    "\006\005\121\021\061\001\001\000\006\005\120\021\061" +
    "\001\001\000\006\005\117\021\061\001\001\000\006\005" +
    "\116\021\061\001\001\000\006\005\115\021\061\001\001" +
    "\000\006\005\114\021\061\001\001\000\006\005\113\021" +
    "\061\001\001\000\006\005\112\021\061\001\001\000\006" +
    "\005\111\021\061\001\001\000\006\005\110\021\061\001" +
    "\001\000\006\005\107\021\061\001\001\000\006\005\106" +
    "\021\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\132\001\001\000\006\005\133\021\061\001\001\000" +
    "\002\001\001\000\004\011\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\140\021" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\155\017\153\001\001\000\010\005\144\006\145\021" +
    "\061\001\001\000\004\007\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\151\021" +
    "\061\001\001\000\004\007\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\157\001" +
    "\001\000\004\016\160\001\001\000\002\001\001\000\004" +
    "\020\161\001\001\000\002\001\001\000\006\005\163\021" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\144\006\166\021\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\172\021\061" +
    "\001\001\000\002\001\001\000\006\005\174\021\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\177" +
    "\021\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\206\021\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\211\021\061\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PandaCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PandaCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PandaCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  ErrorMsg errorMsg;
  
  public PandaCup(PandaLex lex, ErrorMsg errorMsg)
  {
    this(lex);
    this.errorMsg = errorMsg;
  }

  Loc loc(int left, int right)
  {
    return new Loc(((PandaLex)getScanner()).getSource(), left, right);
  }
 
  public void report_error(String message, Object info)
  {
    Loc loc;
    if (info instanceof java_cup.runtime.Symbol)
    {
      java_cup.runtime.Symbol tok = (java_cup.runtime.Symbol) info;
      loc = loc(tok.left, tok.right);
      message += ": " + Tokens.dumpToken(tok);
    }
    else
      loc = new Loc();
    errorMsg.error(loc, message);
  }

  public void syntax_error(java_cup.runtime.Symbol tok)
  {
    report_error("syntax error", tok);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PandaCup$actions {


  //static Loc loc()
  //{
  //  return new Loc();
  //}

  Loc loc(int left, int right)
  {
    return parser.loc(left, right);
  }

  private final PandaCup parser;

  /** Constructor */
  CUP$PandaCup$actions(PandaCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PandaCup$do_action_part00000000(
    int                        CUP$PandaCup$act_num,
    java_cup.runtime.lr_parser CUP$PandaCup$parser,
    java.util.Stack            CUP$PandaCup$stack,
    int                        CUP$PandaCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PandaCup$result;

      /* select the action based on the action number */
      switch (CUP$PandaCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).right;
		List<Dec> start_val = (List<Dec>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		RESULT = start_val;
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PandaCup$parser.done_parsing();
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= decs 
            {
              List<Dec> RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		List<Dec> ds = (List<Dec>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = ds; 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decs ::= dec 
            {
              List<Dec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = List.of(d); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("decs",1, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decs ::= dec decs 
            {
              List<Dec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		List<Dec> ds = (List<Dec>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = ds.prepend(d); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("decs",1, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec ::= TYPE ID EQ type 
            {
              Dec RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Ty t = (Ty)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new TypeDec(loc(aleft,tright),n,t); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec ::= VAR ID COLON ID EQ exp 
            {
              Dec RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-4)).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new VarDec(loc(vleft,eright),n,t,e); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-5)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec ::= VAR ID ASSIGN exp 
            {
              Dec RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new VarDec(loc(vleft,eright),n,null,e); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec ::= FUNCTION ID LPAREN params RPAREN COLON ID EQ exp 
            {
              Dec RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-7)).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-5)).right;
		List<Param> p = (List<Param>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new FunDec(loc(fleft,eright),n,p,t,e); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-8)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec ::= FUNCTION ID LPAREN params RPAREN EQ exp 
            {
              Dec RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-5)).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).right;
		List<Param> p = (List<Param>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new FunDec(loc(fleft,eright),n,p,null,e); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-6)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= ID 
            {
              Ty RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new NameTy(loc(nleft,nright), n); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= LBRACK ID RBRACK 
            {
              Ty RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new ArrayTy(loc(aleft,bright), n); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= LBRACE params RBRACE 
            {
              Ty RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).right;
		List<Param> ps = (List<Param>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new RecordTy(loc(aleft,bright), ps); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // params ::= 
            {
              List<Param> RESULT =null;
		 RESULT = List.empty(); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("params",10, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // params ::= param paramsrest 
            {
              List<Param> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int restright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		List<Param> rest = (List<Param>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = rest.prepend(p); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("params",10, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramsrest ::= 
            {
              List<Param> RESULT =null;
		 RESULT = List.empty(); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("paramsrest",11, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramsrest ::= COMMA param paramsrest 
            {
              List<Param> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int restright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		List<Param> rest = (List<Param>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = rest.prepend(p); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("paramsrest",11, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= ID COLON ID 
            {
              Param RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new Param(loc(nleft,tright), n, t); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("param",9, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // fields ::= 
            {
              List<Field> RESULT =null;
		 RESULT = List.empty(); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("fields",13, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fields ::= field fieldsrest 
            {
              List<Field> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int restright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		List<Field> rest = (List<Field>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = rest.prepend(f); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("fields",13, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fieldsrest ::= 
            {
              List<Field> RESULT =null;
		 RESULT = List.empty(); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("fieldsrest",14, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fieldsrest ::= COMMA field fieldsrest 
            {
              List<Field> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int restright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		List<Field> rest = (List<Field>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = rest.prepend(f); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("fieldsrest",14, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // field ::= ID EQ exp 
            {
              Field RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new Field(loc(nleft,eright), n, e); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("field",12, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var ::= ID 
            {
              Var RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new SimpleVar(loc(vleft,vright), v); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("var",15, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var ::= var LBRACK exp RBRACK 
            {
              Var RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new SubscriptVar(loc(vleft,zright), v, e); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("var",15, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var ::= var DOT ID 
            {
              Var RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new FieldVar(loc(vleft,nright), v, n); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("var",15, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= NIL 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new NilExp(loc(xleft,xright)); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= LITINT 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Long x = (Long)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new IntExp(loc(xleft,xright), x); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= LITREAL 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new RealExp(loc(xleft,xright), x); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= LITBOOL 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new BoolExp(loc(xleft,xright), x); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= LITCHAR 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Character x = (Character)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new CharExp(loc(xleft,xright), x); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= LITSTRING 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new StringExp(loc(xleft,xright), x); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= AT ID LBRACE fields RBRACE 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).right;
		List<Field> fs = (List<Field>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new RecordExp(loc(aleft,zright), v, fs); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-4)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= AT ID LBRACK explist RBRACK 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new ArrayExp(loc(aleft,zright), v, es); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-4)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= var 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new VarExp(loc(vleft,vright), v); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= MINUS exp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new Op1Exp(loc(aleft,xright), Op1.MINUS, x); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp PLUS exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new OpExp(loc(xleft,yright), Op.PLUS, x, y); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp MINUS exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new OpExp(loc(xleft,yright), Op.MINUS, x, y); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp TIMES exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new OpExp(loc(xleft,yright), Op.TIMES, x, y); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp DIV exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new OpExp(loc(xleft,yright), Op.DIV, x, y); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp MOD exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new OpExp(loc(xleft,yright), Op.MOD, x, y); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp POW exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new OpExp(loc(xleft,yright), Op.POW, x, y); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp EQ exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new OpExp(loc(xleft,yright), Op.EQ, x, y); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp NE exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new OpExp(loc(xleft,yright), Op.NE, x, y); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp LT exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new OpExp(loc(xleft,yright), Op.LT, x, y); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp LE exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new OpExp(loc(xleft,yright), Op.LE, x, y); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp GT exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new OpExp(loc(xleft,yright), Op.GT, x, y); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp GE exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new OpExp(loc(xleft,yright), Op.GE, x, y); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp AND exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new OpExp(loc(xleft,yright), Op.AND, x, y); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp OR exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new OpExp(loc(xleft,yright), Op.OR, x, y); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= var ASSIGN exp 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new AssignExp(loc(vleft,xright), v, x); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= ID LPAREN explist RPAREN 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).right;
		List<Exp> args = (List<Exp>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new CallExp(loc(nleft,rright), n, args); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= IF exp THEN exp ELSE exp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-4)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new IfExp(loc(aleft,yright), t, x, y); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-5)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= IF exp THEN exp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new IfExp(loc(aleft,xright), t, x, null); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= WHILE exp DO exp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new WhileExp(loc(aleft,xright), t, x); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= BREAK 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new BreakExp(loc(bleft,bright)); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= LET decs IN exp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		List<Dec> ds = (List<Dec>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new LetExp(loc(lleft,eright), ds, e); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= LPAREN expseq RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).right;
		List<Exp> s = (List<Exp>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = new SeqExp(loc(aleft,zright),s); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // explist ::= 
            {
              List<Exp> RESULT =null;
		 RESULT = List.empty(); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("explist",4, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // explist ::= exp explistrest 
            {
              List<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int restright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		List<Exp> rest = (List<Exp>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = rest.prepend(e); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("explist",4, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // explistrest ::= 
            {
              List<Exp> RESULT =null;
		 RESULT = List.empty(); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("explistrest",5, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // explistrest ::= COMMA exp explistrest 
            {
              List<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int restright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		List<Exp> rest = (List<Exp>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = rest.prepend(e); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("explistrest",5, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expseq ::= 
            {
              List<Exp> RESULT =null;
		 RESULT = List.empty(); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("expseq",6, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expseq ::= exp expseqrest 
            {
              List<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int restright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		List<Exp> rest = (List<Exp>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = rest.prepend(e); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("expseq",6, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expseqrest ::= 
            {
              List<Exp> RESULT =null;
		 RESULT = List.empty(); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("expseqrest",7, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expseqrest ::= SEMI exp expseqrest 
            {
              List<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).left;
		int restright = ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()).right;
		List<Exp> rest = (List<Exp>)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		 RESULT = rest.prepend(e); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("expseqrest",7, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PandaCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PandaCup$do_action(
    int                        CUP$PandaCup$act_num,
    java_cup.runtime.lr_parser CUP$PandaCup$parser,
    java.util.Stack            CUP$PandaCup$stack,
    int                        CUP$PandaCup$top)
    throws java.lang.Exception
    {
              return CUP$PandaCup$do_action_part00000000(
                               CUP$PandaCup$act_num,
                               CUP$PandaCup$parser,
                               CUP$PandaCup$stack,
                               CUP$PandaCup$top);
    }
}

}
