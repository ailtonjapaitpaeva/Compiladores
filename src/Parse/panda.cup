// panda.cup    -*- mode: Java -*-

package Parse;

import Absyn.*;
import util.List;
import ErrorMsg.Loc;
import ErrorMsg.ErrorMsg;
import Symbol.Symbol;

// Routines and variables for use by the code embedded in the grammar
action code
{:
  //static Loc loc()
  //{
  //  return new Loc();
  //}

  Loc loc(int left, int right)
  {
    return parser.loc(left, right);
  }
:};

// Methods and variables to be placed directly within the generated parser class
parser code
{:
  ErrorMsg errorMsg;
  
  public PandaCup(PandaLex lex, ErrorMsg errorMsg)
  {
    this(lex);
    this.errorMsg = errorMsg;
  }

  Loc loc(int left, int right)
  {
    return new Loc(((PandaLex)getScanner()).getSource(), left, right);
  }
 
  public void report_error(String message, Object info)
  {
    Loc loc;
    if (info instanceof java_cup.runtime.Symbol)
    {
      java_cup.runtime.Symbol tok = (java_cup.runtime.Symbol) info;
      loc = loc(tok.left, tok.right);
      message += ": " + Tokens.dumpToken(tok);
    }
    else
      loc = new Loc();
    errorMsg.error(loc, message);
  }

  public void syntax_error(java_cup.runtime.Symbol tok)
  {
    report_error("syntax error", tok);
  }
:}

terminal               NIL;

non terminal Integer program;

start with program;

program ::=
  NIL                                                  {: RESULT = 0; :}
;

