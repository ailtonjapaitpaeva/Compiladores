
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package panda.Parse;

import panda.Absyn.*;
import javaslang.collection.List;
import panda.ErrorMsg.Loc;
import panda.ErrorMsg.ErrorMsg;
import panda.Symbol.Symbol;
import java_cup.runtime.SymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PandaCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return PandaSym.class;
}

  /** Default constructor. */
  public PandaCup() {super();}

  /** Constructor which sets the default scanner. */
  public PandaCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PandaCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\006\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\010\000\002\003\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\014\000\010\004\004\005\006\006\010\001\002\000" +
    "\010\002\uffff\007\uffff\010\uffff\001\002\000\004\002\016" +
    "\001\002\000\010\002\ufffe\007\ufffe\010\ufffe\001\002\000" +
    "\004\002\000\001\002\000\010\004\004\005\006\006\010" +
    "\001\002\000\004\007\012\001\002\000\010\004\004\005" +
    "\006\006\010\001\002\000\010\002\ufffc\007\ufffc\010\014" +
    "\001\002\000\010\004\004\005\006\006\010\001\002\000" +
    "\010\002\ufffd\007\ufffd\010\ufffd\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\014\000\006\002\004\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\010\001\001\000\002\001\001\000\004\003" +
    "\012\001\001\000\002\001\001\000\004\003\014\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PandaCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PandaCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PandaCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//@@CUPDBG1

  ErrorMsg errorMsg;
  
  public PandaCup(PandaLex lex, SymbolFactory symbolFactory, ErrorMsg errorMsg) {
    this(lex, symbolFactory);
    this.errorMsg = errorMsg;
  }

  Loc loc(Location left, Location right) {
    return new Loc(left, right);
  }
 
  public void report_error(String message, Object info) {
    Loc loc;
    if (info instanceof ComplexSymbol) {
      ComplexSymbol tok = (ComplexSymbol) info;
      loc = loc(tok.xleft, tok.xright);
      message += ": " + Tokens.dumpToken(tok);
    }
    else
      loc = new Loc();
    errorMsg.error(loc, message);
  }

  public void syntax_error(java_cup.runtime.Symbol tok) {
    report_error("syntax error", tok);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PandaCup$actions {

//@@CUPDBG0

  //static Loc loc()
  //{
  //  return new Loc();
  //}

  Loc loc(Location left, Location right) {
    return parser.loc(left, right);
  }

  private final PandaCup parser;

  /** Constructor */
  CUP$PandaCup$actions(PandaCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PandaCup$do_action_part00000000(
    int                        CUP$PandaCup$act_num,
    java_cup.runtime.lr_parser CUP$PandaCup$parser,
    java.util.Stack            CUP$PandaCup$stack,
    int                        CUP$PandaCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PandaCup$result;

      /* select the action based on the action number */
      switch (CUP$PandaCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).xright;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)).value;
		RESULT = start_val;
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-1)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PandaCup$parser.done_parsing();
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= exp 
            {
              Exp RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.peek()).xright;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		//@@CUPDBG2
 RESULT = x; 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp ::= LITINT 
            {
              Exp RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.peek()).xright;
		Long x = (Long)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		//@@CUPDBG3
 RESULT = new IntExp(loc(xxleft,xxright),x); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= LITBOOL 
            {
              Exp RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.peek()).xright;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		//@@CUPDBG4
 RESULT = new BoolExp(loc(xxleft,xxright),x); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= IF exp THEN exp ELSE exp 
            {
              Exp RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-5)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-5)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-5)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-4)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-4)).xright;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-4)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).xright;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.peek()).xright;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		//@@CUPDBG5
 RESULT = new IfExp(loc(ixleft,bxright),t,a,b); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-5)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= IF exp THEN exp 
            {
              Exp RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).xright;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-2)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$PandaCup$stack.peek()).xright;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$PandaCup$stack.peek()).value;
		//@@CUPDBG6
 RESULT = new IfExp(loc(ixleft,axright),t,a,null); 
              CUP$PandaCup$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$PandaCup$stack.elementAt(CUP$PandaCup$top-3)), ((java_cup.runtime.Symbol)CUP$PandaCup$stack.peek()), RESULT);
            }
          return CUP$PandaCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PandaCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PandaCup$do_action(
    int                        CUP$PandaCup$act_num,
    java_cup.runtime.lr_parser CUP$PandaCup$parser,
    java.util.Stack            CUP$PandaCup$stack,
    int                        CUP$PandaCup$top)
    throws java.lang.Exception
    {
              return CUP$PandaCup$do_action_part00000000(
                               CUP$PandaCup$act_num,
                               CUP$PandaCup$parser,
                               CUP$PandaCup$stack,
                               CUP$PandaCup$top);
    }
}

}
